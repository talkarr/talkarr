// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Conference {
  acronym     String  @id
  title       String  @unique
  slug        String  @unique
  description String?
  link        String?

  updated_at   DateTime
  aspect_ratio String

  // urls
  logo_url     String
  url          String
  schedule_url String
  Event        Event[]
}

model Person {
  name   String  @id
  events Event[]
}

model Tag {
  name   String  @id
  events Event[]
}

model File {
  path     String   @id
  filename String
  url      String
  created  DateTime @default(now())
  mime     String
  bytes    BigInt
  is_video Boolean

  event     Event  @relation(fields: [eventGuid], references: [guid], onDelete: Cascade)
  eventGuid String
}

model Event {
  // general fields
  date_added DateTime @default(now())

  // media.ccc.de specific fields
  // datetimes
  guid         String   @id
  date         DateTime
  release_date DateTime
  updated_at   DateTime
  slug         String   @unique

  // meta
  title             String
  subtitle          String?
  description       String?
  thumb_url         String
  poster_url        String
  original_language String
  frontend_link     String
  duration          BigInt

  // relations
  persons           Person[]
  tags              Tag[]
  conference        Conference @relation(fields: [conferenceAcronym], references: [acronym], onDelete: Cascade)
  conferenceAcronym String
  root_folder       RootFolder @relation(fields: [rootFolderPath], references: [path], onDelete: Restrict)
  rootFolderPath    String

  // files
  file File[]

  // infos
  eventInfo EventInfo?
}

model EventInfo {
  guid String @id @default(cuid())

  is_downloading     Boolean
  download_progress  Float
  download_error     String?
  download_exit_code Int?

  // event
  event     Event? @relation(fields: [eventGuid], references: [guid], onDelete: Cascade)
  eventGuid String @unique
}

model RootFolder {
  path String @unique

  marked            Boolean @default(false)
  did_not_find_mark Boolean @default(true)

  events Event[]
}

model Settings {
  key   String @id
  value String
}

model Locks {
  name String @id
}
