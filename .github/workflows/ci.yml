name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'

env:
  NODE_VERSION: 23.x
  # PLATFORMS: linux/amd64,linux/arm64 # will activate once we have initial release
  PLATFORMS: linux/amd64

jobs:
  lint:
    name: Run ESLint and type checks
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      checks: write
      pull-requests: write
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies
        run: YOUTUBE_DL_SKIP_DOWNLOAD=true yarn install --frozen-lockfile --non-interactive --prefer-offline

      - name: Run ESLint for frontend
        continue-on-error: true
        id: eslint-frontend
        run: |
          yarn lint:frontend --max-warnings=0 --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
          
          # if success, create an empty file
          if [ $? -eq 0 ]; then
              touch eslint-results-frontend.result
          fi

      - name: Upload Frontend ESLint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          category: 'Frontend'
          wait-for-processing: true

      - name: Run ESLint for backend
        continue-on-error: true
        id: eslint-backend
        run: |
          yarn lint:backend --max-warnings=0 --format @microsoft/eslint-formatter-sarif --output-file eslint-results-backend.sarif
          
          # if success, create an empty file
          if [ $? -eq 0 ]; then
              touch eslint-results-backend.result
          fi

      - name: Upload Backend ESLint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results-backend.sarif
          category: 'Backend'
          wait-for-processing: true

      - name: Fail if ESLint found any errors
        run: |
          if [ -f eslint-results-frontend.result ] && [ -f eslint-results-backend.result ]; then
              exit 0
          else
              exit 1
          fi

      - name: Run generate and check if something changed
        run: yarn generate && git diff --exit-code

      - name: Run type checks
        run: |
          yarn typecheck

# Do not ask me why this one is broken
#  typecheck:
#    runs-on: ubuntu-latest
#    permissions:
#      actions: read
#      contents: write
#      checks: write
#      pull-requests: write
#      security-events: write
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Setup Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'yarn'
#          cache-dependency-path: 'yarn.lock'
#
#      - name: Install dependencies
#        run: yarn install --frozen-lockfile --non-interactive --prefer-offline
#
#      - name: Make sure that tsconfig.json exists
#        run: |
#          if [ ! -f tsconfig.json ]; then
#              echo "tsconfig.json does not exist"
#              exit 1
#          fi
#
#      - name: Run generate and check if something changed
#        run: yarn generate && git diff --exit-code
#
#      - name: Run type checks
#        run: |
#          pwd
#          yarn typecheck

  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      checks: write
      pull-requests: write
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies
        run: YOUTUBE_DL_SKIP_DOWNLOAD=true yarn install --frozen-lockfile --non-interactive --prefer-offline

      - name: Prepare for tests
        id: prepare
        run: |
          yarn dev:db
          
          # wait for the database to be ready
          npx wait-on -t 3m tcp:5432
          
          # redis
          yarn dev:redis
          
          # wait for redis to be ready
          npx wait-on -t 3m tcp:6379
          
          mkdir -p logs
          chmod 777 -R logs

      - name: Run migrations
        run: yarn prisma db push --force-reset --accept-data-loss

      - name: Start dev server
        run: yarn dev &

      - name: Wait for the app to be ready
        run: |
          npx wait-on -t 3m http://localhost:3232

      - name: Run backend tests
        run: yarn test:backend

# Changing it from build-linux-container to build-container would break statistics, so we will keep it as is
  build-linux-container:
    name: Build container
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    needs:
     - lint
    steps:
      - name: Install numfmt if not installed
        run: |
          if ! command -v numfmt &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y numfmt
          fi

      - uses: actions/checkout@v4

      - name: Log in into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in into Docker Hub
        if: github.actor != 'dependabot[bot]'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: latest=false
          # create a tag "nightly" which works like "latest" but is updated with every commit instead of only for git tags
          tags: |
            type=raw,value=nightly

          images: |
            ghcr.io/${{ github.repository }}
            docker.io/${{ secrets.DOCKER_USERNAME }}/talkarr,enable=${{ github.actor != 'dependabot[bot]' }}

      - name: Generate git stats for building
        id: git-stats
        run: |
          CURRENT_COMMIT=$(git rev-parse HEAD)
          CURRENT_COMMIT_TS=$(git show -s --format=%ct HEAD)
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          CURRENT_VERSION=$(git describe --tags --always)
          CURRENT_TAG=$(git describe --tags --abbrev=0 --exact-match 2>/dev/null || echo "false")
          
          echo "CURRENT_COMMIT=${CURRENT_COMMIT}" >> $GITHUB_ENV
          echo "CURRENT_COMMIT_TS=${CURRENT_COMMIT_TS}" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=${CURRENT_BRANCH}" >> $GITHUB_ENV
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
          echo "CURRENT_TAG=${CURRENT_TAG}" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.PLATFORMS }}
          # push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          push: true
          build-args: |
            OVERRIDE_CURRENT_COMMIT=${{ env.CURRENT_COMMIT }}
            OVERRIDE_CURRENT_COMMIT_TS=${{ env.CURRENT_COMMIT_TS }}
            OVERRIDE_CURRENT_BRANCH=${{ env.CURRENT_BRANCH }}
            OVERRIDE_CURRENT_VERSION=${{ env.CURRENT_VERSION }}
            OVERRIDE_CURRENT_TAG=${{ env.CURRENT_TAG }}

      - name: Output sha of the container
        id: ref
        run: |
          tags="${{ steps.meta.outputs.tags }}"
          first_tag=$(echo $tags | cut -d ' ' -f 1)
          ref=$(docker manifest inspect -v "$first_tag" | jq -r '.[0].Ref')
          
          if [ -z "${ref}" ]; then
              echo "Failed to get the sha of the container"
              exit 1
          fi
          
          echo "ref=${ref}"
          
          # output sha
          echo "ref=${ref}" >> $GITHUB_OUTPUT

      - name: Print statistics of container
        continue-on-error: true
        run: |
          # print things like tags, labels, container size
          tags="${{ steps.meta.outputs.tags }}"
          labels="${{ steps.meta.outputs.labels }}"
          first_tag=$(echo $tags | cut -d ' ' -f 1)
          layer_count=$(docker manifest inspect -v "$first_tag" | jq -r '.[0].OCIManifest.layers | length')
          image_size=$(docker manifest inspect -v "$first_tag" | jq -r '.[0].OCIManifest.layers | map(.size) | add')
          image_size_fmt=$(numfmt --to=iec-i --suffix=B $image_size)
          
          echo "===== Container statistics ====="
          echo "Tags: $tags"
          echo "Labels: $labels"
          echo "Layer count: $layer_count"
          echo "Image size: $image_size bytes ($image_size_fmt)"
          echo "================================"

    outputs:
      ref: ${{ steps.ref.outputs.ref }}

  run-e2e-tests:
    name: Run E2E tests
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      attestations: write
      id-token: write
      pull-requests: write
    env:
      container_ref: ${{ needs.build-linux-container.outputs.ref }}
    needs:
      - build-linux-container
      - test
      - lint
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies
        run: YOUTUBE_DL_SKIP_DOWNLOAD=true yarn install --frozen-lockfile --non-interactive --prefer-offline

      - name: Install playwright dependencies
        run: |
          yarn playwright install-deps
          yarn playwright install

      - name: Log in into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
         platforms: ${{ env.PLATFORMS }}

      - name: Set up Docker Compose
        run: |
          # Check if "docker compose" is installed
          version=$(docker compose version --short 2>/dev/null)
          
          if [ -n "$version" ]; then
              exit 0
          fi
          
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin tree

      - name: Pull Docker image
        run: |
          docker pull ${{ env.container_ref }}

      - name: Start Database and Redis
        run: |
          docker compose -f docker-compose.dev.yml up -d db redis
          
          # wait for the database to be ready
          npx wait-on -t 3m tcp:5432 tcp:6379
          
          # print container status
          docker ps -a

      - name: Start Docker container
        continue-on-error: true
        run: |
          # Make sure the .env file is not empty
          if [ ! -s .env ]; then
              echo "The .env file is empty"
              exit 1
          fi
          
          mkdir -p logs
          chmod 777 -R logs
          
          mkdir -p e2e/e2e-test-folder
          chmod 777 -R e2e/e2e-test-folder
          
          docker run -d --rm -v ./.env:/app/.env -v ./logs:/app/logs -v ./e2e/e2e-test-folder:/app/e2e/e2e-test-folder --network host ${{ env.container_ref }}
          
          echo "Waiting for the app to be ready"
          
          # wait for the app to be ready
          npx wait-on -t 2m http://localhost:3232

      - name: Run E2E tests
        id: e2e
        continue-on-error: true
        if: success()
        run: |
          yarn test:e2e:ci
          echo "TESTING_STATUS=$?" >> $GITHUB_ENV

      - uses: daun/playwright-report-summary@v3
        with:
          report-file: results.json
          job-summary: 'true'

      - uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - uses: actions/upload-artifact@v4
        with:
          name: playwright-trace
          path: test-results/
          retention-days: 30

      - name: Dump container logs
        run: |
          docker logs $(docker ps -q --filter ancestor=${{ env.container_ref }}) > logs/container.log

      - name: Upload logs folder
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs/
          retention-days: 30

      - name: Fail if exit code is not 0
        run: |
          # if TESTING_STATUS is empty, fail the job
          if [ -z "${{ env.TESTING_STATUS }}" ]; then
              exit 1
          fi
          
          if [ "${{ env.TESTING_STATUS }}" -ne 0 ]; then
              exit 1
          fi

  tag-latest-container:
    name: Tag latest container
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    needs:
      - build-linux-container
      # Only release when all tests succeed
      - run-e2e-tests
      - test
      - lint
    env:
      container_ref: ${{ needs.build-linux-container.outputs.ref }}
    # only for main branch or tags
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Log in into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in into Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      # - name: Tag latest container
      #   run: |
      #     # get the sha of the container
      #     tags="${{ steps.meta.outputs.tags }}"
      #     first_tag=$(echo $tags | cut -d ' ' -f 1)
      #
      #     # tag the container as latest
      #     docker tag ${{ env.container_ref }} ghcr.io/${{ github.repository }}:latest
      #
      #     # push the container
      #     docker push ghcr.io/${{ github.repository }}:latest
      #
      #     echo "Tagged latest container with the tag: latest"
      #
      #     # if this is a tag push, tag another container with the tag
      #     if [ -n "${{ github.ref }}" ]; then
      #         docker tag ${{ env.container_ref }} ghcr.io/${{ github.repository }}:${{ github.ref }}
      #         docker push ghcr.io/${{ github.repository }}:${{ github.ref }}
      #         echo "Tagged latest container with the tag: ${{ github.ref }}"
      #     fi

      - name: Tag ghcr container with latest using buildx
        run: |  
          # tag the container as latest
          docker buildx imagetools create "${{ env.container_ref }}" --tag "ghcr.io/${{ github.repository }}:latest"
          
          echo "Successfully tagged the ghcr container with the tag: latest"

      - name: Tag ghcr container with git tag using buildx
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # tag the container with the git tag
          docker buildx imagetools create "${{ env.container_ref }}" --tag "ghcr.io/${{ github.repository }}:${{ github.ref }}"
          
          echo "Successfully tagged the ghcr container with the tag: ${{ github.ref }}"

      - name: Tag docker.io container with latest using buildx
        continue-on-error: true
        run: |
          # tag the container as latest
          docker buildx imagetools create "${{ env.container_ref }}" --tag "docker.io/${{ secrets.DOCKER_USERNAME }}/talkarr:latest"
          
          echo "Successfully tagged the docker.io container with the tag: latest"

      - name: Tag docker.io container with git tag using buildx
        if: startsWith(github.ref, 'refs/tags/v')
        continue-on-error: true
        run: |
          # tag the container with the git tag
          docker buildx imagetools create "${{ env.container_ref }}" --tag "docker.io/${{ secrets.DOCKER_USERNAME }}/talkarr:${{ github.ref }}"
          
          echo "Successfully tagged the docker.io container with the tag: ${{ github.ref }}"
