name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docs/**'

env:
  NODE_VERSION: 23.x

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      checks: write
      pull-requests: write
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive --prefer-offline

      - name: Run ESLint
        continue-on-error: true
        run: |
          yarn lint --max-warnings=0 --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif

      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

      - name: Run generate and check if something changed
        run: yarn generate && git diff --exit-code

      - name: Run type checks
        run: |
          yarn typecheck

# Do not ask me why this one is broken
#  typecheck:
#    runs-on: ubuntu-latest
#    permissions:
#      actions: read
#      contents: write
#      checks: write
#      pull-requests: write
#      security-events: write
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Setup Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'yarn'
#          cache-dependency-path: 'yarn.lock'
#
#      - name: Install dependencies
#        run: yarn install --frozen-lockfile --non-interactive --prefer-offline
#
#      - name: Make sure that tsconfig.json exists
#        run: |
#          if [ ! -f tsconfig.json ]; then
#              echo "tsconfig.json does not exist"
#              exit 1
#          fi
#
#      - name: Run generate and check if something changed
#        run: yarn generate && git diff --exit-code
#
#      - name: Run type checks
#        run: |
#          pwd
#          yarn typecheck

  test:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      checks: write
      pull-requests: write
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive --prefer-offline

      - name: Prepare for tests
        id: prepare
        run: |
          yarn dev:db
          
          # wait for the database to be ready
          npx wait-on tcp:5432
          
          # initialize the database with prisma.io
          yarn prisma db push --force-reset --accept-data-loss
          
          # redis
          yarn dev:redis
          
          # wait for redis to be ready
          npx wait-on tcp:6379
          
          yarn dev &

      - name: Wait for the app to be ready
        run: |
          npx wait-on http://localhost:3232

      - name: Run backend tests
        run: yarn test:backend

  build-linux-container:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    env:
      # PLATFORMS: linux/amd64,linux/arm64
      PLATFORMS: linux/amd64
    steps:
      - uses: actions/checkout@v4

      - name: Log in into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Generate FLAVOR variable
        run: |
          FLAVOR="latest"

          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
              FLAVOR=""
          fi
        
          echo "FLAVOR=${FLAVOR}" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: ${{ env.FLAVOR }}
          images: |
            ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.PLATFORMS }}
          # push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          push: true

      - name: Output sha of the container
        id: ref
        run: |
          ref=$(docker manifest inspect -v ${{ steps.meta.outputs.tags }} | jq -r '.[0].Ref')
          
          if [ -z "${ref}" ]; then
              echo "Failed to get the sha of the container"
              exit 1
          fi
          
          echo "ref=${ref}"
          
          # output sha
          echo "ref=${ref}" >> $GITHUB_OUTPUT

    outputs:
      ref: ${{ steps.ref.outputs.ref }}

  run-e2e-tests:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    env:
      container_ref: ${{ needs.build-linux-container.outputs.ref }}
    needs:
      - build-linux-container
      - test
      - lint
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive --prefer-offline

      - name: Log in into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
         platforms: linux/amd64

      - name: Set up Docker Compose
        run: |
          # Check if "docker compose" is installed
          version=$(docker compose version --short 2>/dev/null)
          
          if [ -n "$version" ]; then
              exit 0
          fi
          
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin

      - name: Pull Docker image
        run: |
          docker pull ${{ env.container_ref }}

      - name: Start Database and Redis
        run: |
          docker compose -f docker-compose.dev.yml up -d db redis
          
          # wait for the database to be ready
          npx wait-on tcp:5432
          npx wait-on tcp:6379

      - name: Start Docker container
        run: |
          # Make sure the .env file is not empty
          if [ ! -s .env ]; then
              echo "The .env file is empty"
              exit 1
          fi          
          
          docker run -d --rm -v ./.env:/app/.env --network host ${{ env.container_ref }}
          
          # wait for the app to be ready
          npx wait-on http://localhost:3232

      - name: Run E2E tests
        id: e2e
        continue-on-error: true
        run: yarn test:e2e

      - uses: daun/playwright-report-summary@v3
        with:
          report-file: results.json
          job-summary: 'true'

      - uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload logs folder
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs/
          retention-days: 30
