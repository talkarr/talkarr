name: Cache Cleanup after PR Close
on:
  pull_request:
    types:
      - closed
  workflow_dispatch:
    inputs:
        ref:
            description: 'The branch or tag ref to clean caches for (e.g., refs/pull/123/merge)'
            required: false
            default: ''
            type: string

permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cleanup:
    name: Cleanup caches for the closed PR
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Check out code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          token: ${{ steps.generate-token.outputs.token }}

      - name: Cleanup
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          GH_REF: ${{ github.ref }}
        run: |
          REPO=${{ github.repository }}
          
          # Determine the ref to use
          if [ -n "${{ github.event.inputs.ref }}" ]; then
              REF="${{ github.event.inputs.ref }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
              REF="refs/pull/${{ github.event.pull_request.number }}/merge"
          else
              echo "No ref provided and event is not a pull_request. Exiting."
              exit 0
          fi

          echo "Fetching list of cache keys"
          cacheKeysForPR=$(gh cache list -R $REPO --ref $REF --json key --template '{{range .}}{{.key}}{{"\n"}}{{end}}')
          if [ -z "$cacheKeysForPR" ]; then
              echo "No caches found for this PR"
              exit 0
          fi
          echo "Found caches:"
          echo "$cacheKeysForPR"

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              echo "Deleting cache with key: $cacheKey"
              gh cache delete -R $REPO --key "$cacheKey" --confirm
          done
          set -e
          echo "Done"
